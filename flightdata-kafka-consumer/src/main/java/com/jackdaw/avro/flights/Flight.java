/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.jackdaw.avro.flights;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Avro Schema for Flight */
@org.apache.avro.specific.AvroGenerated
public class Flight extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3630152727098172104L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Flight\",\"namespace\":\"com.jackdaw.avro.flights\",\"doc\":\"Avro Schema for Flight\",\"fields\":[{\"name\":\"flightSymbol\",\"type\":\"string\",\"doc\":\"Symbol of flight\"},{\"name\":\"airline\",\"type\":\"string\",\"doc\":\"Name of airline\"},{\"name\":\"flightType\",\"type\":{\"type\":\"enum\",\"name\":\"FlightType\",\"doc\":\"Type of flight\",\"symbols\":[\"Internacional\",\"Nacional\",\"Regional\"]}},{\"name\":\"departureEstimate\",\"type\":\"string\",\"doc\":\"Estimated time of departure\"},{\"name\":\"departureReal\",\"type\":\"string\",\"doc\":\"Real time of departure\"},{\"name\":\"arrivalEstimate\",\"type\":\"string\",\"doc\":\"Estimated time of arrival\"},{\"name\":\"arrivalReal\",\"type\":\"string\",\"doc\":\"Real time of arrival\"},{\"name\":\"flightSituation\",\"type\":{\"type\":\"enum\",\"name\":\"FlightSituation\",\"doc\":\"Indicator of whether this flight was cancelled, or completed\",\"symbols\":[\"Realizado\",\"Cancelado\"]}},{\"name\":\"codeJustification\",\"type\":\"string\",\"doc\":\"Justification code\"},{\"name\":\"originArport\",\"type\":\"string\",\"doc\":\"Airport of departure\"},{\"name\":\"originCity\",\"type\":\"string\",\"doc\":\"City of departure\"},{\"name\":\"originState\",\"type\":\"string\",\"doc\":\"State of departure\"},{\"name\":\"originCountry\",\"type\":\"string\",\"doc\":\"Country of departure\"},{\"name\":\"destinationAirport\",\"type\":\"string\",\"doc\":\"Airport of arrival\"},{\"name\":\"destinationCity\",\"type\":\"string\",\"doc\":\"City of arrival\"},{\"name\":\"destinationState\",\"type\":\"string\",\"doc\":\"State of arival\"},{\"name\":\"destinationCountry\",\"type\":\"string\",\"doc\":\"Country of arival\"},{\"name\":\"destinationLongitude\",\"type\":\"double\",\"doc\":\"Longitude coordinate of destination point\"},{\"name\":\"destinationLatitude\",\"type\":\"double\",\"doc\":\"Latitude coordinate of destination point\"},{\"name\":\"originLongitude\",\"type\":\"double\",\"doc\":\"Longitude coordinate of origin point\"},{\"name\":\"originAltitude\",\"type\":\"double\",\"doc\":\"Latitude coordinate of origin point\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Flight> ENCODER =
      new BinaryMessageEncoder<Flight>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Flight> DECODER =
      new BinaryMessageDecoder<Flight>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Flight> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Flight> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Flight>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Flight to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Flight from a ByteBuffer. */
  public static Flight fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Symbol of flight */
  @Deprecated public java.lang.CharSequence flightSymbol;
  /** Name of airline */
  @Deprecated public java.lang.CharSequence airline;
  @Deprecated public com.jackdaw.avro.flights.FlightType flightType;
  /** Estimated time of departure */
  @Deprecated public java.lang.CharSequence departureEstimate;
  /** Real time of departure */
  @Deprecated public java.lang.CharSequence departureReal;
  /** Estimated time of arrival */
  @Deprecated public java.lang.CharSequence arrivalEstimate;
  /** Real time of arrival */
  @Deprecated public java.lang.CharSequence arrivalReal;
  @Deprecated public com.jackdaw.avro.flights.FlightSituation flightSituation;
  /** Justification code */
  @Deprecated public java.lang.CharSequence codeJustification;
  /** Airport of departure */
  @Deprecated public java.lang.CharSequence originArport;
  /** City of departure */
  @Deprecated public java.lang.CharSequence originCity;
  /** State of departure */
  @Deprecated public java.lang.CharSequence originState;
  /** Country of departure */
  @Deprecated public java.lang.CharSequence originCountry;
  /** Airport of arrival */
  @Deprecated public java.lang.CharSequence destinationAirport;
  /** City of arrival */
  @Deprecated public java.lang.CharSequence destinationCity;
  /** State of arival */
  @Deprecated public java.lang.CharSequence destinationState;
  /** Country of arival */
  @Deprecated public java.lang.CharSequence destinationCountry;
  /** Longitude coordinate of destination point */
  @Deprecated public double destinationLongitude;
  /** Latitude coordinate of destination point */
  @Deprecated public double destinationLatitude;
  /** Longitude coordinate of origin point */
  @Deprecated public double originLongitude;
  /** Latitude coordinate of origin point */
  @Deprecated public double originAltitude;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Flight() {}

  /**
   * All-args constructor.
   * @param flightSymbol Symbol of flight
   * @param airline Name of airline
   * @param flightType The new value for flightType
   * @param departureEstimate Estimated time of departure
   * @param departureReal Real time of departure
   * @param arrivalEstimate Estimated time of arrival
   * @param arrivalReal Real time of arrival
   * @param flightSituation The new value for flightSituation
   * @param codeJustification Justification code
   * @param originArport Airport of departure
   * @param originCity City of departure
   * @param originState State of departure
   * @param originCountry Country of departure
   * @param destinationAirport Airport of arrival
   * @param destinationCity City of arrival
   * @param destinationState State of arival
   * @param destinationCountry Country of arival
   * @param destinationLongitude Longitude coordinate of destination point
   * @param destinationLatitude Latitude coordinate of destination point
   * @param originLongitude Longitude coordinate of origin point
   * @param originAltitude Latitude coordinate of origin point
   */
  public Flight(java.lang.CharSequence flightSymbol, java.lang.CharSequence airline, com.jackdaw.avro.flights.FlightType flightType, java.lang.CharSequence departureEstimate, java.lang.CharSequence departureReal, java.lang.CharSequence arrivalEstimate, java.lang.CharSequence arrivalReal, com.jackdaw.avro.flights.FlightSituation flightSituation, java.lang.CharSequence codeJustification, java.lang.CharSequence originArport, java.lang.CharSequence originCity, java.lang.CharSequence originState, java.lang.CharSequence originCountry, java.lang.CharSequence destinationAirport, java.lang.CharSequence destinationCity, java.lang.CharSequence destinationState, java.lang.CharSequence destinationCountry, java.lang.Double destinationLongitude, java.lang.Double destinationLatitude, java.lang.Double originLongitude, java.lang.Double originAltitude) {
    this.flightSymbol = flightSymbol;
    this.airline = airline;
    this.flightType = flightType;
    this.departureEstimate = departureEstimate;
    this.departureReal = departureReal;
    this.arrivalEstimate = arrivalEstimate;
    this.arrivalReal = arrivalReal;
    this.flightSituation = flightSituation;
    this.codeJustification = codeJustification;
    this.originArport = originArport;
    this.originCity = originCity;
    this.originState = originState;
    this.originCountry = originCountry;
    this.destinationAirport = destinationAirport;
    this.destinationCity = destinationCity;
    this.destinationState = destinationState;
    this.destinationCountry = destinationCountry;
    this.destinationLongitude = destinationLongitude;
    this.destinationLatitude = destinationLatitude;
    this.originLongitude = originLongitude;
    this.originAltitude = originAltitude;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return flightSymbol;
    case 1: return airline;
    case 2: return flightType;
    case 3: return departureEstimate;
    case 4: return departureReal;
    case 5: return arrivalEstimate;
    case 6: return arrivalReal;
    case 7: return flightSituation;
    case 8: return codeJustification;
    case 9: return originArport;
    case 10: return originCity;
    case 11: return originState;
    case 12: return originCountry;
    case 13: return destinationAirport;
    case 14: return destinationCity;
    case 15: return destinationState;
    case 16: return destinationCountry;
    case 17: return destinationLongitude;
    case 18: return destinationLatitude;
    case 19: return originLongitude;
    case 20: return originAltitude;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: flightSymbol = (java.lang.CharSequence)value$; break;
    case 1: airline = (java.lang.CharSequence)value$; break;
    case 2: flightType = (com.jackdaw.avro.flights.FlightType)value$; break;
    case 3: departureEstimate = (java.lang.CharSequence)value$; break;
    case 4: departureReal = (java.lang.CharSequence)value$; break;
    case 5: arrivalEstimate = (java.lang.CharSequence)value$; break;
    case 6: arrivalReal = (java.lang.CharSequence)value$; break;
    case 7: flightSituation = (com.jackdaw.avro.flights.FlightSituation)value$; break;
    case 8: codeJustification = (java.lang.CharSequence)value$; break;
    case 9: originArport = (java.lang.CharSequence)value$; break;
    case 10: originCity = (java.lang.CharSequence)value$; break;
    case 11: originState = (java.lang.CharSequence)value$; break;
    case 12: originCountry = (java.lang.CharSequence)value$; break;
    case 13: destinationAirport = (java.lang.CharSequence)value$; break;
    case 14: destinationCity = (java.lang.CharSequence)value$; break;
    case 15: destinationState = (java.lang.CharSequence)value$; break;
    case 16: destinationCountry = (java.lang.CharSequence)value$; break;
    case 17: destinationLongitude = (java.lang.Double)value$; break;
    case 18: destinationLatitude = (java.lang.Double)value$; break;
    case 19: originLongitude = (java.lang.Double)value$; break;
    case 20: originAltitude = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'flightSymbol' field.
   * @return Symbol of flight
   */
  public java.lang.CharSequence getFlightSymbol() {
    return flightSymbol;
  }

  /**
   * Sets the value of the 'flightSymbol' field.
   * Symbol of flight
   * @param value the value to set.
   */
  public void setFlightSymbol(java.lang.CharSequence value) {
    this.flightSymbol = value;
  }

  /**
   * Gets the value of the 'airline' field.
   * @return Name of airline
   */
  public java.lang.CharSequence getAirline() {
    return airline;
  }

  /**
   * Sets the value of the 'airline' field.
   * Name of airline
   * @param value the value to set.
   */
  public void setAirline(java.lang.CharSequence value) {
    this.airline = value;
  }

  /**
   * Gets the value of the 'flightType' field.
   * @return The value of the 'flightType' field.
   */
  public com.jackdaw.avro.flights.FlightType getFlightType() {
    return flightType;
  }

  /**
   * Sets the value of the 'flightType' field.
   * @param value the value to set.
   */
  public void setFlightType(com.jackdaw.avro.flights.FlightType value) {
    this.flightType = value;
  }

  /**
   * Gets the value of the 'departureEstimate' field.
   * @return Estimated time of departure
   */
  public java.lang.CharSequence getDepartureEstimate() {
    return departureEstimate;
  }

  /**
   * Sets the value of the 'departureEstimate' field.
   * Estimated time of departure
   * @param value the value to set.
   */
  public void setDepartureEstimate(java.lang.CharSequence value) {
    this.departureEstimate = value;
  }

  /**
   * Gets the value of the 'departureReal' field.
   * @return Real time of departure
   */
  public java.lang.CharSequence getDepartureReal() {
    return departureReal;
  }

  /**
   * Sets the value of the 'departureReal' field.
   * Real time of departure
   * @param value the value to set.
   */
  public void setDepartureReal(java.lang.CharSequence value) {
    this.departureReal = value;
  }

  /**
   * Gets the value of the 'arrivalEstimate' field.
   * @return Estimated time of arrival
   */
  public java.lang.CharSequence getArrivalEstimate() {
    return arrivalEstimate;
  }

  /**
   * Sets the value of the 'arrivalEstimate' field.
   * Estimated time of arrival
   * @param value the value to set.
   */
  public void setArrivalEstimate(java.lang.CharSequence value) {
    this.arrivalEstimate = value;
  }

  /**
   * Gets the value of the 'arrivalReal' field.
   * @return Real time of arrival
   */
  public java.lang.CharSequence getArrivalReal() {
    return arrivalReal;
  }

  /**
   * Sets the value of the 'arrivalReal' field.
   * Real time of arrival
   * @param value the value to set.
   */
  public void setArrivalReal(java.lang.CharSequence value) {
    this.arrivalReal = value;
  }

  /**
   * Gets the value of the 'flightSituation' field.
   * @return The value of the 'flightSituation' field.
   */
  public com.jackdaw.avro.flights.FlightSituation getFlightSituation() {
    return flightSituation;
  }

  /**
   * Sets the value of the 'flightSituation' field.
   * @param value the value to set.
   */
  public void setFlightSituation(com.jackdaw.avro.flights.FlightSituation value) {
    this.flightSituation = value;
  }

  /**
   * Gets the value of the 'codeJustification' field.
   * @return Justification code
   */
  public java.lang.CharSequence getCodeJustification() {
    return codeJustification;
  }

  /**
   * Sets the value of the 'codeJustification' field.
   * Justification code
   * @param value the value to set.
   */
  public void setCodeJustification(java.lang.CharSequence value) {
    this.codeJustification = value;
  }

  /**
   * Gets the value of the 'originArport' field.
   * @return Airport of departure
   */
  public java.lang.CharSequence getOriginArport() {
    return originArport;
  }

  /**
   * Sets the value of the 'originArport' field.
   * Airport of departure
   * @param value the value to set.
   */
  public void setOriginArport(java.lang.CharSequence value) {
    this.originArport = value;
  }

  /**
   * Gets the value of the 'originCity' field.
   * @return City of departure
   */
  public java.lang.CharSequence getOriginCity() {
    return originCity;
  }

  /**
   * Sets the value of the 'originCity' field.
   * City of departure
   * @param value the value to set.
   */
  public void setOriginCity(java.lang.CharSequence value) {
    this.originCity = value;
  }

  /**
   * Gets the value of the 'originState' field.
   * @return State of departure
   */
  public java.lang.CharSequence getOriginState() {
    return originState;
  }

  /**
   * Sets the value of the 'originState' field.
   * State of departure
   * @param value the value to set.
   */
  public void setOriginState(java.lang.CharSequence value) {
    this.originState = value;
  }

  /**
   * Gets the value of the 'originCountry' field.
   * @return Country of departure
   */
  public java.lang.CharSequence getOriginCountry() {
    return originCountry;
  }

  /**
   * Sets the value of the 'originCountry' field.
   * Country of departure
   * @param value the value to set.
   */
  public void setOriginCountry(java.lang.CharSequence value) {
    this.originCountry = value;
  }

  /**
   * Gets the value of the 'destinationAirport' field.
   * @return Airport of arrival
   */
  public java.lang.CharSequence getDestinationAirport() {
    return destinationAirport;
  }

  /**
   * Sets the value of the 'destinationAirport' field.
   * Airport of arrival
   * @param value the value to set.
   */
  public void setDestinationAirport(java.lang.CharSequence value) {
    this.destinationAirport = value;
  }

  /**
   * Gets the value of the 'destinationCity' field.
   * @return City of arrival
   */
  public java.lang.CharSequence getDestinationCity() {
    return destinationCity;
  }

  /**
   * Sets the value of the 'destinationCity' field.
   * City of arrival
   * @param value the value to set.
   */
  public void setDestinationCity(java.lang.CharSequence value) {
    this.destinationCity = value;
  }

  /**
   * Gets the value of the 'destinationState' field.
   * @return State of arival
   */
  public java.lang.CharSequence getDestinationState() {
    return destinationState;
  }

  /**
   * Sets the value of the 'destinationState' field.
   * State of arival
   * @param value the value to set.
   */
  public void setDestinationState(java.lang.CharSequence value) {
    this.destinationState = value;
  }

  /**
   * Gets the value of the 'destinationCountry' field.
   * @return Country of arival
   */
  public java.lang.CharSequence getDestinationCountry() {
    return destinationCountry;
  }

  /**
   * Sets the value of the 'destinationCountry' field.
   * Country of arival
   * @param value the value to set.
   */
  public void setDestinationCountry(java.lang.CharSequence value) {
    this.destinationCountry = value;
  }

  /**
   * Gets the value of the 'destinationLongitude' field.
   * @return Longitude coordinate of destination point
   */
  public java.lang.Double getDestinationLongitude() {
    return destinationLongitude;
  }

  /**
   * Sets the value of the 'destinationLongitude' field.
   * Longitude coordinate of destination point
   * @param value the value to set.
   */
  public void setDestinationLongitude(java.lang.Double value) {
    this.destinationLongitude = value;
  }

  /**
   * Gets the value of the 'destinationLatitude' field.
   * @return Latitude coordinate of destination point
   */
  public java.lang.Double getDestinationLatitude() {
    return destinationLatitude;
  }

  /**
   * Sets the value of the 'destinationLatitude' field.
   * Latitude coordinate of destination point
   * @param value the value to set.
   */
  public void setDestinationLatitude(java.lang.Double value) {
    this.destinationLatitude = value;
  }

  /**
   * Gets the value of the 'originLongitude' field.
   * @return Longitude coordinate of origin point
   */
  public java.lang.Double getOriginLongitude() {
    return originLongitude;
  }

  /**
   * Sets the value of the 'originLongitude' field.
   * Longitude coordinate of origin point
   * @param value the value to set.
   */
  public void setOriginLongitude(java.lang.Double value) {
    this.originLongitude = value;
  }

  /**
   * Gets the value of the 'originAltitude' field.
   * @return Latitude coordinate of origin point
   */
  public java.lang.Double getOriginAltitude() {
    return originAltitude;
  }

  /**
   * Sets the value of the 'originAltitude' field.
   * Latitude coordinate of origin point
   * @param value the value to set.
   */
  public void setOriginAltitude(java.lang.Double value) {
    this.originAltitude = value;
  }

  /**
   * Creates a new Flight RecordBuilder.
   * @return A new Flight RecordBuilder
   */
  public static com.jackdaw.avro.flights.Flight.Builder newBuilder() {
    return new com.jackdaw.avro.flights.Flight.Builder();
  }

  /**
   * Creates a new Flight RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Flight RecordBuilder
   */
  public static com.jackdaw.avro.flights.Flight.Builder newBuilder(com.jackdaw.avro.flights.Flight.Builder other) {
    return new com.jackdaw.avro.flights.Flight.Builder(other);
  }

  /**
   * Creates a new Flight RecordBuilder by copying an existing Flight instance.
   * @param other The existing instance to copy.
   * @return A new Flight RecordBuilder
   */
  public static com.jackdaw.avro.flights.Flight.Builder newBuilder(com.jackdaw.avro.flights.Flight other) {
    return new com.jackdaw.avro.flights.Flight.Builder(other);
  }

  /**
   * RecordBuilder for Flight instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Flight>
    implements org.apache.avro.data.RecordBuilder<Flight> {

    /** Symbol of flight */
    private java.lang.CharSequence flightSymbol;
    /** Name of airline */
    private java.lang.CharSequence airline;
    private com.jackdaw.avro.flights.FlightType flightType;
    /** Estimated time of departure */
    private java.lang.CharSequence departureEstimate;
    /** Real time of departure */
    private java.lang.CharSequence departureReal;
    /** Estimated time of arrival */
    private java.lang.CharSequence arrivalEstimate;
    /** Real time of arrival */
    private java.lang.CharSequence arrivalReal;
    private com.jackdaw.avro.flights.FlightSituation flightSituation;
    /** Justification code */
    private java.lang.CharSequence codeJustification;
    /** Airport of departure */
    private java.lang.CharSequence originArport;
    /** City of departure */
    private java.lang.CharSequence originCity;
    /** State of departure */
    private java.lang.CharSequence originState;
    /** Country of departure */
    private java.lang.CharSequence originCountry;
    /** Airport of arrival */
    private java.lang.CharSequence destinationAirport;
    /** City of arrival */
    private java.lang.CharSequence destinationCity;
    /** State of arival */
    private java.lang.CharSequence destinationState;
    /** Country of arival */
    private java.lang.CharSequence destinationCountry;
    /** Longitude coordinate of destination point */
    private double destinationLongitude;
    /** Latitude coordinate of destination point */
    private double destinationLatitude;
    /** Longitude coordinate of origin point */
    private double originLongitude;
    /** Latitude coordinate of origin point */
    private double originAltitude;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.jackdaw.avro.flights.Flight.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.flightSymbol)) {
        this.flightSymbol = data().deepCopy(fields()[0].schema(), other.flightSymbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.airline)) {
        this.airline = data().deepCopy(fields()[1].schema(), other.airline);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.flightType)) {
        this.flightType = data().deepCopy(fields()[2].schema(), other.flightType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.departureEstimate)) {
        this.departureEstimate = data().deepCopy(fields()[3].schema(), other.departureEstimate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.departureReal)) {
        this.departureReal = data().deepCopy(fields()[4].schema(), other.departureReal);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.arrivalEstimate)) {
        this.arrivalEstimate = data().deepCopy(fields()[5].schema(), other.arrivalEstimate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.arrivalReal)) {
        this.arrivalReal = data().deepCopy(fields()[6].schema(), other.arrivalReal);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.flightSituation)) {
        this.flightSituation = data().deepCopy(fields()[7].schema(), other.flightSituation);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.codeJustification)) {
        this.codeJustification = data().deepCopy(fields()[8].schema(), other.codeJustification);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.originArport)) {
        this.originArport = data().deepCopy(fields()[9].schema(), other.originArport);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.originCity)) {
        this.originCity = data().deepCopy(fields()[10].schema(), other.originCity);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.originState)) {
        this.originState = data().deepCopy(fields()[11].schema(), other.originState);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.originCountry)) {
        this.originCountry = data().deepCopy(fields()[12].schema(), other.originCountry);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.destinationAirport)) {
        this.destinationAirport = data().deepCopy(fields()[13].schema(), other.destinationAirport);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.destinationCity)) {
        this.destinationCity = data().deepCopy(fields()[14].schema(), other.destinationCity);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.destinationState)) {
        this.destinationState = data().deepCopy(fields()[15].schema(), other.destinationState);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.destinationCountry)) {
        this.destinationCountry = data().deepCopy(fields()[16].schema(), other.destinationCountry);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.destinationLongitude)) {
        this.destinationLongitude = data().deepCopy(fields()[17].schema(), other.destinationLongitude);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.destinationLatitude)) {
        this.destinationLatitude = data().deepCopy(fields()[18].schema(), other.destinationLatitude);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.originLongitude)) {
        this.originLongitude = data().deepCopy(fields()[19].schema(), other.originLongitude);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.originAltitude)) {
        this.originAltitude = data().deepCopy(fields()[20].schema(), other.originAltitude);
        fieldSetFlags()[20] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Flight instance
     * @param other The existing instance to copy.
     */
    private Builder(com.jackdaw.avro.flights.Flight other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.flightSymbol)) {
        this.flightSymbol = data().deepCopy(fields()[0].schema(), other.flightSymbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.airline)) {
        this.airline = data().deepCopy(fields()[1].schema(), other.airline);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.flightType)) {
        this.flightType = data().deepCopy(fields()[2].schema(), other.flightType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.departureEstimate)) {
        this.departureEstimate = data().deepCopy(fields()[3].schema(), other.departureEstimate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.departureReal)) {
        this.departureReal = data().deepCopy(fields()[4].schema(), other.departureReal);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.arrivalEstimate)) {
        this.arrivalEstimate = data().deepCopy(fields()[5].schema(), other.arrivalEstimate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.arrivalReal)) {
        this.arrivalReal = data().deepCopy(fields()[6].schema(), other.arrivalReal);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.flightSituation)) {
        this.flightSituation = data().deepCopy(fields()[7].schema(), other.flightSituation);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.codeJustification)) {
        this.codeJustification = data().deepCopy(fields()[8].schema(), other.codeJustification);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.originArport)) {
        this.originArport = data().deepCopy(fields()[9].schema(), other.originArport);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.originCity)) {
        this.originCity = data().deepCopy(fields()[10].schema(), other.originCity);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.originState)) {
        this.originState = data().deepCopy(fields()[11].schema(), other.originState);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.originCountry)) {
        this.originCountry = data().deepCopy(fields()[12].schema(), other.originCountry);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.destinationAirport)) {
        this.destinationAirport = data().deepCopy(fields()[13].schema(), other.destinationAirport);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.destinationCity)) {
        this.destinationCity = data().deepCopy(fields()[14].schema(), other.destinationCity);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.destinationState)) {
        this.destinationState = data().deepCopy(fields()[15].schema(), other.destinationState);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.destinationCountry)) {
        this.destinationCountry = data().deepCopy(fields()[16].schema(), other.destinationCountry);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.destinationLongitude)) {
        this.destinationLongitude = data().deepCopy(fields()[17].schema(), other.destinationLongitude);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.destinationLatitude)) {
        this.destinationLatitude = data().deepCopy(fields()[18].schema(), other.destinationLatitude);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.originLongitude)) {
        this.originLongitude = data().deepCopy(fields()[19].schema(), other.originLongitude);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.originAltitude)) {
        this.originAltitude = data().deepCopy(fields()[20].schema(), other.originAltitude);
        fieldSetFlags()[20] = true;
      }
    }

    /**
      * Gets the value of the 'flightSymbol' field.
      * Symbol of flight
      * @return The value.
      */
    public java.lang.CharSequence getFlightSymbol() {
      return flightSymbol;
    }

    /**
      * Sets the value of the 'flightSymbol' field.
      * Symbol of flight
      * @param value The value of 'flightSymbol'.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder setFlightSymbol(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.flightSymbol = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'flightSymbol' field has been set.
      * Symbol of flight
      * @return True if the 'flightSymbol' field has been set, false otherwise.
      */
    public boolean hasFlightSymbol() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'flightSymbol' field.
      * Symbol of flight
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder clearFlightSymbol() {
      flightSymbol = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'airline' field.
      * Name of airline
      * @return The value.
      */
    public java.lang.CharSequence getAirline() {
      return airline;
    }

    /**
      * Sets the value of the 'airline' field.
      * Name of airline
      * @param value The value of 'airline'.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder setAirline(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.airline = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'airline' field has been set.
      * Name of airline
      * @return True if the 'airline' field has been set, false otherwise.
      */
    public boolean hasAirline() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'airline' field.
      * Name of airline
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder clearAirline() {
      airline = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'flightType' field.
      * @return The value.
      */
    public com.jackdaw.avro.flights.FlightType getFlightType() {
      return flightType;
    }

    /**
      * Sets the value of the 'flightType' field.
      * @param value The value of 'flightType'.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder setFlightType(com.jackdaw.avro.flights.FlightType value) {
      validate(fields()[2], value);
      this.flightType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'flightType' field has been set.
      * @return True if the 'flightType' field has been set, false otherwise.
      */
    public boolean hasFlightType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'flightType' field.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder clearFlightType() {
      flightType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'departureEstimate' field.
      * Estimated time of departure
      * @return The value.
      */
    public java.lang.CharSequence getDepartureEstimate() {
      return departureEstimate;
    }

    /**
      * Sets the value of the 'departureEstimate' field.
      * Estimated time of departure
      * @param value The value of 'departureEstimate'.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder setDepartureEstimate(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.departureEstimate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'departureEstimate' field has been set.
      * Estimated time of departure
      * @return True if the 'departureEstimate' field has been set, false otherwise.
      */
    public boolean hasDepartureEstimate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'departureEstimate' field.
      * Estimated time of departure
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder clearDepartureEstimate() {
      departureEstimate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'departureReal' field.
      * Real time of departure
      * @return The value.
      */
    public java.lang.CharSequence getDepartureReal() {
      return departureReal;
    }

    /**
      * Sets the value of the 'departureReal' field.
      * Real time of departure
      * @param value The value of 'departureReal'.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder setDepartureReal(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.departureReal = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'departureReal' field has been set.
      * Real time of departure
      * @return True if the 'departureReal' field has been set, false otherwise.
      */
    public boolean hasDepartureReal() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'departureReal' field.
      * Real time of departure
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder clearDepartureReal() {
      departureReal = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'arrivalEstimate' field.
      * Estimated time of arrival
      * @return The value.
      */
    public java.lang.CharSequence getArrivalEstimate() {
      return arrivalEstimate;
    }

    /**
      * Sets the value of the 'arrivalEstimate' field.
      * Estimated time of arrival
      * @param value The value of 'arrivalEstimate'.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder setArrivalEstimate(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.arrivalEstimate = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'arrivalEstimate' field has been set.
      * Estimated time of arrival
      * @return True if the 'arrivalEstimate' field has been set, false otherwise.
      */
    public boolean hasArrivalEstimate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'arrivalEstimate' field.
      * Estimated time of arrival
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder clearArrivalEstimate() {
      arrivalEstimate = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'arrivalReal' field.
      * Real time of arrival
      * @return The value.
      */
    public java.lang.CharSequence getArrivalReal() {
      return arrivalReal;
    }

    /**
      * Sets the value of the 'arrivalReal' field.
      * Real time of arrival
      * @param value The value of 'arrivalReal'.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder setArrivalReal(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.arrivalReal = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'arrivalReal' field has been set.
      * Real time of arrival
      * @return True if the 'arrivalReal' field has been set, false otherwise.
      */
    public boolean hasArrivalReal() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'arrivalReal' field.
      * Real time of arrival
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder clearArrivalReal() {
      arrivalReal = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'flightSituation' field.
      * @return The value.
      */
    public com.jackdaw.avro.flights.FlightSituation getFlightSituation() {
      return flightSituation;
    }

    /**
      * Sets the value of the 'flightSituation' field.
      * @param value The value of 'flightSituation'.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder setFlightSituation(com.jackdaw.avro.flights.FlightSituation value) {
      validate(fields()[7], value);
      this.flightSituation = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'flightSituation' field has been set.
      * @return True if the 'flightSituation' field has been set, false otherwise.
      */
    public boolean hasFlightSituation() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'flightSituation' field.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder clearFlightSituation() {
      flightSituation = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'codeJustification' field.
      * Justification code
      * @return The value.
      */
    public java.lang.CharSequence getCodeJustification() {
      return codeJustification;
    }

    /**
      * Sets the value of the 'codeJustification' field.
      * Justification code
      * @param value The value of 'codeJustification'.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder setCodeJustification(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.codeJustification = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'codeJustification' field has been set.
      * Justification code
      * @return True if the 'codeJustification' field has been set, false otherwise.
      */
    public boolean hasCodeJustification() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'codeJustification' field.
      * Justification code
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder clearCodeJustification() {
      codeJustification = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'originArport' field.
      * Airport of departure
      * @return The value.
      */
    public java.lang.CharSequence getOriginArport() {
      return originArport;
    }

    /**
      * Sets the value of the 'originArport' field.
      * Airport of departure
      * @param value The value of 'originArport'.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder setOriginArport(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.originArport = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'originArport' field has been set.
      * Airport of departure
      * @return True if the 'originArport' field has been set, false otherwise.
      */
    public boolean hasOriginArport() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'originArport' field.
      * Airport of departure
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder clearOriginArport() {
      originArport = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'originCity' field.
      * City of departure
      * @return The value.
      */
    public java.lang.CharSequence getOriginCity() {
      return originCity;
    }

    /**
      * Sets the value of the 'originCity' field.
      * City of departure
      * @param value The value of 'originCity'.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder setOriginCity(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.originCity = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'originCity' field has been set.
      * City of departure
      * @return True if the 'originCity' field has been set, false otherwise.
      */
    public boolean hasOriginCity() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'originCity' field.
      * City of departure
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder clearOriginCity() {
      originCity = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'originState' field.
      * State of departure
      * @return The value.
      */
    public java.lang.CharSequence getOriginState() {
      return originState;
    }

    /**
      * Sets the value of the 'originState' field.
      * State of departure
      * @param value The value of 'originState'.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder setOriginState(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.originState = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'originState' field has been set.
      * State of departure
      * @return True if the 'originState' field has been set, false otherwise.
      */
    public boolean hasOriginState() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'originState' field.
      * State of departure
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder clearOriginState() {
      originState = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'originCountry' field.
      * Country of departure
      * @return The value.
      */
    public java.lang.CharSequence getOriginCountry() {
      return originCountry;
    }

    /**
      * Sets the value of the 'originCountry' field.
      * Country of departure
      * @param value The value of 'originCountry'.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder setOriginCountry(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.originCountry = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'originCountry' field has been set.
      * Country of departure
      * @return True if the 'originCountry' field has been set, false otherwise.
      */
    public boolean hasOriginCountry() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'originCountry' field.
      * Country of departure
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder clearOriginCountry() {
      originCountry = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'destinationAirport' field.
      * Airport of arrival
      * @return The value.
      */
    public java.lang.CharSequence getDestinationAirport() {
      return destinationAirport;
    }

    /**
      * Sets the value of the 'destinationAirport' field.
      * Airport of arrival
      * @param value The value of 'destinationAirport'.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder setDestinationAirport(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.destinationAirport = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'destinationAirport' field has been set.
      * Airport of arrival
      * @return True if the 'destinationAirport' field has been set, false otherwise.
      */
    public boolean hasDestinationAirport() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'destinationAirport' field.
      * Airport of arrival
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder clearDestinationAirport() {
      destinationAirport = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'destinationCity' field.
      * City of arrival
      * @return The value.
      */
    public java.lang.CharSequence getDestinationCity() {
      return destinationCity;
    }

    /**
      * Sets the value of the 'destinationCity' field.
      * City of arrival
      * @param value The value of 'destinationCity'.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder setDestinationCity(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.destinationCity = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'destinationCity' field has been set.
      * City of arrival
      * @return True if the 'destinationCity' field has been set, false otherwise.
      */
    public boolean hasDestinationCity() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'destinationCity' field.
      * City of arrival
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder clearDestinationCity() {
      destinationCity = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'destinationState' field.
      * State of arival
      * @return The value.
      */
    public java.lang.CharSequence getDestinationState() {
      return destinationState;
    }

    /**
      * Sets the value of the 'destinationState' field.
      * State of arival
      * @param value The value of 'destinationState'.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder setDestinationState(java.lang.CharSequence value) {
      validate(fields()[15], value);
      this.destinationState = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'destinationState' field has been set.
      * State of arival
      * @return True if the 'destinationState' field has been set, false otherwise.
      */
    public boolean hasDestinationState() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'destinationState' field.
      * State of arival
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder clearDestinationState() {
      destinationState = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'destinationCountry' field.
      * Country of arival
      * @return The value.
      */
    public java.lang.CharSequence getDestinationCountry() {
      return destinationCountry;
    }

    /**
      * Sets the value of the 'destinationCountry' field.
      * Country of arival
      * @param value The value of 'destinationCountry'.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder setDestinationCountry(java.lang.CharSequence value) {
      validate(fields()[16], value);
      this.destinationCountry = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'destinationCountry' field has been set.
      * Country of arival
      * @return True if the 'destinationCountry' field has been set, false otherwise.
      */
    public boolean hasDestinationCountry() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'destinationCountry' field.
      * Country of arival
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder clearDestinationCountry() {
      destinationCountry = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'destinationLongitude' field.
      * Longitude coordinate of destination point
      * @return The value.
      */
    public java.lang.Double getDestinationLongitude() {
      return destinationLongitude;
    }

    /**
      * Sets the value of the 'destinationLongitude' field.
      * Longitude coordinate of destination point
      * @param value The value of 'destinationLongitude'.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder setDestinationLongitude(double value) {
      validate(fields()[17], value);
      this.destinationLongitude = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'destinationLongitude' field has been set.
      * Longitude coordinate of destination point
      * @return True if the 'destinationLongitude' field has been set, false otherwise.
      */
    public boolean hasDestinationLongitude() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'destinationLongitude' field.
      * Longitude coordinate of destination point
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder clearDestinationLongitude() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'destinationLatitude' field.
      * Latitude coordinate of destination point
      * @return The value.
      */
    public java.lang.Double getDestinationLatitude() {
      return destinationLatitude;
    }

    /**
      * Sets the value of the 'destinationLatitude' field.
      * Latitude coordinate of destination point
      * @param value The value of 'destinationLatitude'.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder setDestinationLatitude(double value) {
      validate(fields()[18], value);
      this.destinationLatitude = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'destinationLatitude' field has been set.
      * Latitude coordinate of destination point
      * @return True if the 'destinationLatitude' field has been set, false otherwise.
      */
    public boolean hasDestinationLatitude() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'destinationLatitude' field.
      * Latitude coordinate of destination point
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder clearDestinationLatitude() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'originLongitude' field.
      * Longitude coordinate of origin point
      * @return The value.
      */
    public java.lang.Double getOriginLongitude() {
      return originLongitude;
    }

    /**
      * Sets the value of the 'originLongitude' field.
      * Longitude coordinate of origin point
      * @param value The value of 'originLongitude'.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder setOriginLongitude(double value) {
      validate(fields()[19], value);
      this.originLongitude = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'originLongitude' field has been set.
      * Longitude coordinate of origin point
      * @return True if the 'originLongitude' field has been set, false otherwise.
      */
    public boolean hasOriginLongitude() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'originLongitude' field.
      * Longitude coordinate of origin point
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder clearOriginLongitude() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'originAltitude' field.
      * Latitude coordinate of origin point
      * @return The value.
      */
    public java.lang.Double getOriginAltitude() {
      return originAltitude;
    }

    /**
      * Sets the value of the 'originAltitude' field.
      * Latitude coordinate of origin point
      * @param value The value of 'originAltitude'.
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder setOriginAltitude(double value) {
      validate(fields()[20], value);
      this.originAltitude = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'originAltitude' field has been set.
      * Latitude coordinate of origin point
      * @return True if the 'originAltitude' field has been set, false otherwise.
      */
    public boolean hasOriginAltitude() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'originAltitude' field.
      * Latitude coordinate of origin point
      * @return This builder.
      */
    public com.jackdaw.avro.flights.Flight.Builder clearOriginAltitude() {
      fieldSetFlags()[20] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Flight build() {
      try {
        Flight record = new Flight();
        record.flightSymbol = fieldSetFlags()[0] ? this.flightSymbol : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.airline = fieldSetFlags()[1] ? this.airline : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.flightType = fieldSetFlags()[2] ? this.flightType : (com.jackdaw.avro.flights.FlightType) defaultValue(fields()[2]);
        record.departureEstimate = fieldSetFlags()[3] ? this.departureEstimate : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.departureReal = fieldSetFlags()[4] ? this.departureReal : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.arrivalEstimate = fieldSetFlags()[5] ? this.arrivalEstimate : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.arrivalReal = fieldSetFlags()[6] ? this.arrivalReal : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.flightSituation = fieldSetFlags()[7] ? this.flightSituation : (com.jackdaw.avro.flights.FlightSituation) defaultValue(fields()[7]);
        record.codeJustification = fieldSetFlags()[8] ? this.codeJustification : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.originArport = fieldSetFlags()[9] ? this.originArport : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.originCity = fieldSetFlags()[10] ? this.originCity : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.originState = fieldSetFlags()[11] ? this.originState : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.originCountry = fieldSetFlags()[12] ? this.originCountry : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.destinationAirport = fieldSetFlags()[13] ? this.destinationAirport : (java.lang.CharSequence) defaultValue(fields()[13]);
        record.destinationCity = fieldSetFlags()[14] ? this.destinationCity : (java.lang.CharSequence) defaultValue(fields()[14]);
        record.destinationState = fieldSetFlags()[15] ? this.destinationState : (java.lang.CharSequence) defaultValue(fields()[15]);
        record.destinationCountry = fieldSetFlags()[16] ? this.destinationCountry : (java.lang.CharSequence) defaultValue(fields()[16]);
        record.destinationLongitude = fieldSetFlags()[17] ? this.destinationLongitude : (java.lang.Double) defaultValue(fields()[17]);
        record.destinationLatitude = fieldSetFlags()[18] ? this.destinationLatitude : (java.lang.Double) defaultValue(fields()[18]);
        record.originLongitude = fieldSetFlags()[19] ? this.originLongitude : (java.lang.Double) defaultValue(fields()[19]);
        record.originAltitude = fieldSetFlags()[20] ? this.originAltitude : (java.lang.Double) defaultValue(fields()[20]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Flight>
    WRITER$ = (org.apache.avro.io.DatumWriter<Flight>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Flight>
    READER$ = (org.apache.avro.io.DatumReader<Flight>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
