#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const consumer = require('../src/consumer');
const debug = require('debug')('charts:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const HOST = '0.0.0.0';
const PORT = normalizePort(process.env.PORT || '3000');
app.set('port', PORT);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = require('socket.io').listen(server);

consumer.on('message', function (message) {
    console.log(message.value);
    io.sockets.emit('delay', message);
});

// ------
// todo delete as a real data-source come into existence
setInterval(function () {
    let message = "{ \"key\": \"1\", \"value\": [ \"0.55\", \"From customer\" ] }";
    console.log("Sending: " + JSON.parse(message).value);
    io.sockets.emit('delay', message);
}, 2000);
// ------

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(PORT);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof PORT === 'string'
        ? 'Pipe ' + PORT
        : 'Port ' + PORT;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log(`Running on http://${HOST}:${PORT}`);
}

module.exports = io;
